import pygame, sys, random
from pygame.math import Vector2


class SNAKE:
   def __init__(self):
       self.body = [Vector2(5,10),Vector2(6,10),Vector2(7,10)]
       self.direction = Vector2(1,0)
       self.new_block = False

   def draw_snake(self):
       for block in self.body:
           x_pos = int(block.x * cell_size)
           y_pos = int(block.y * cell_size)
           block_rect = pygame.Rect(x_pos,y_pos,cell_size,cell_size)
           pygame.draw.rect(screen,(34,139,34),block_rect)

   def move_snake(self):
       if self.new_block == True:
           body_copy = self.body[:]
           body_copy.insert(0, body_copy[0] + self.direction)
           self.body = body_copy[:]
           self.new_block = False
       else:
           body_copy = self.body[:-1] #takes every element except the last
           body_copy.insert(0,body_copy[0] + self.direction)
           self.body = body_copy[:]

   def add_block(self):
       self.new_block = True



class FRUIT:
   def __init__(self):
       self.randomize()

   def draw_fruit(self):
        fruit_rect = pygame.Rect(int(self.pos.x * cell_size),int(self.pos.y * cell_size),cell_size,cell_size) #sets the size and location of rect
        pygame.draw.rect(screen,(210,4,45),fruit_rect) # draw a square
   def randomize(self):
       self.x = random.randint(0, cell_number - 1)  # create random x position
       self.y = random.randint(0, cell_number - 1)  # creates y positon
       self.pos = Vector2(self.x, self.y)

class MAIN:
   def __init__(self):
       self.snake = SNAKE()
       self.fruit = FRUIT()

   def update(self):
       self.snake.move_snake()
       self.check_collision()

   def draw_elements(self):
       self.fruit.draw_fruit()
       self.snake.draw_snake()

   def check_collision(self):
       if self.fruit.pos == self.snake.body[0]:
           self.fruit.randomize()
           self.snake.add_block()
   def check_fail(self):
      if (not 0 <= self.snake.body[0].x < cell_number) OR (not 0 <= self.snake.body[0].y < cell_number):
         self.game_over()

   for block in self.snake.body[1]
      if block == self.snake.body[0]
         self.game_over()

   def game_over(self):
      pygame.quit()
      sys.exit()

pygame.init()
cell_size = 40
cell_number = 20
screen = pygame.display.set_mode((cell_number * cell_size,cell_number * cell_size)) #sets resolution of window
clock = pygame.time.Clock()

SCREEN_UPDATE = pygame.USEREVENT
pygame.time.set_timer(SCREEN_UPDATE,150) #creates a 150ms interval
main_game = MAIN()

#EVENT#


while True:
      for event in pygame.event.get():
         if event.type == pygame.QUIT: #if the red x clicked, quit pygame
            pygame.quit()
            sys.exit


         if event.type == SCREEN_UPDATE: #calls the snake movement function
            main_game.update()
            self.check_fail()


         if event.type == pygame.KEYDOWN: #if the event is equal to key press of
            if event.key == pygame.K_UP: #when up arrow pressed...
               if main_game.snake.direction.y != 1:
                  main_game.snake.direction = Vector2(0,-1) #changes y coordinate by -1, moving up


            if event.key == pygame.K_RIGHT: #when right arrow pressed...
               if main_game.snake.direction.x != -1:
                  main_game.snake.direction = Vector2(1,0) #changes x coordinate by 1, moving right


            if event.key == pygame.K_DOWN: #when down arrow pressed...
               if main_game.snake.direction.y != -1:
                  main_game.snake.direction = Vector2(0,1) #changes y coordinate by 1, moving down


            if event.key == pygame.K_LEFT: #when left arrow pressed...
               if main_game.snake.direction.x != 1:
                  main_game.snake.direction = Vector2(-1,0) #changes x coordinate by -1, moving left


   screen.fill((175,215,70)) #fills the screen(background) with rgb color
   main_game.draw_elements()
   pygame.display.update()
   clock.tick(60) #sets the maximum framerate of the game

